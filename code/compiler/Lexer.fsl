{
module Lexer

open FSharp.Text.Lexing
open Parser;

let lexemeAsString lexbuf =
  LexBuffer<char>.LexemeString lexbuf

let keyword s =
    match s with
    | "else"    -> ELSE
    | "false"   -> CONSTBOOL false
    | "if"      -> IF
    | "elseif"  -> ELSEIF
    | "true"    -> CONSTBOOL true
    | "func"    -> FUNCTION
    | "end"     -> END
    | "Integer" -> INT
    | "Float"   -> FLOAT
    | "Boolean" -> BOOLEAN
    | "Char"    -> CHAR
    | "String"  -> STRING
    | "type"    -> TYPE
    | _         -> NAME s
}

rule Token = parse
  | [' ' '\r' '\t'] { Token lexbuf }
  | '\n'            { NEWLINE }
  | ['0'-'9']+      { CONSTINT (System.Int32.Parse (lexemeAsString lexbuf)) }
  | ['a'-'z''A'-'Z']['a'-'z''A'-'Z''0'-'9']*  { keyword (lexemeAsString lexbuf) }
  | '+'             { PLUS }
  | '-'             { MINUS }
  | '*'             { TIMES }
  | '/'             { DIV }
  | '%'             { MOD }
  | '='             { ASSIGN }
  | "=="            { EQL }
  | "!="            { NOTEQL }
  | '>'             { GT }
  | '<'             { LT }
  | ">="            { GE }
  | "<="            { LE }
  | '!'             { NOT }
  | '('             { LPAR }
  | ')'             { RPAR }
  | eof             { EOF }
  | ','             { COMMA }
  | '|'             { PIPE }
