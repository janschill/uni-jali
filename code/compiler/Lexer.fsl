{
  // Helper functions

module Lexer

open FSharp.Text.Lexing
open Parser;

let lexemeAsString lexbuf =
  LexBuffer<char>.LexemeString lexbuf

let keyword s =
    match s with
    | "else"    -> ELSE
    | "false"   -> CONSTBOOL false
    | "if"      -> IF
    | "elseif"  -> ELSEIF
    | "true"    -> CONSTBOOL true
    | "func"    -> FUNCTION
    | _         -> NAME s

let previousIndentation = 0
let readIndentation (s : string) =
  let currentIndentation = s.Length / 2
  printf "Current indentation:"
  // printf currentIndentation
  if previousIndentation = currentIndentation + 1 then
    previousIndentation = previousIndentation + 1
    INDENT
  else
    previousIndentation = previousIndentation - 1
    DEDENT
}

rule Token = parse
  | [' ' '\r']      { INDENT }
  | ['\t']*         { readIndentation (lexemeAsString lexbuf) }
  | '\n'            { lexbuf.EndPos <- lexbuf.EndPos.NextLine; NEWLINE }
  | ['0'-'9']+      { CONSTINT (System.Int32.Parse (lexemeAsString lexbuf)) }
  | ['a'-'z''A'-'Z']['a'-'z''A'-'Z''0'-'9']*  { keyword (lexemeAsString lexbuf) }
  | '+'             { PLUS }
  | '-'             { MINUS }
  | '*'             { TIMES }
  | '/'             { DIV }
  | '%'             { MOD }
  | '='             { ASSIGN }
  | "=="            { EQL }
  | '!'             { NOT }
  | eof             { EOF }
  | '('             { LPAR }
  | ')'             { RPAR }
