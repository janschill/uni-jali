{
  // Helper functions

module Lexer

open FSharp.Text.Lexing
open Parser;

let lexemeAsString lexbuf =
  LexBuffer<char>.LexemeString lexbuf

let keyword s =
    match s with
    | "else"    -> ELSE
    | "false"   -> CONSTBOOL false
    | "if"      -> IF
    | "elseif"  -> ELSEIF
    | "true"    -> CONSTBOOL true
    | "func"    -> FUNCTION
    | _         -> NAME s

let mutable previousIndentation = 0
let history = []

let readIndentation (currentIndentation) : Option<token> =
  printf "Previous indentation: %d \n" previousIndentation
  printf "Current indentation: %d \n" currentIndentation
  if currentIndentation = previousIndentation then
    None
  else if currentIndentation = previousIndentation + 1 then
    previousIndentation <- previousIndentation + 1
    Some(INDENT)
  else if currentIndentation = previousIndentation - 1 then
    previousIndentation <- previousIndentation - 1
    Some(DEDENT)
  else
    failwith "Lexer error: illegal indentation"

let readTabs (s : string) = readIndentation (s.Length)
let readSpaces (s : string) = readIndentation (s.Length / 2)
let show s = printf "%s. \n" s
}


rule Token = parse
  | [' ' '\r']      { Token lexbuf; }
  | ['\t']*         {
      printf "tabs";
      match readTabs (lexemeAsString lexbuf) with
      | Some(t) -> t
      | None -> Token lexbuf
  }
  | [' ']*          {
      printf "spaces";
      match readSpaces (lexemeAsString lexbuf) with
      | Some(t) -> t
      | None -> Token lexbuf
  }
  | '\n'            { lexbuf.EndPos <- lexbuf.EndPos.NextLine; NEWLINE }
  | ['0'-'9']+      { CONSTINT (System.Int32.Parse (lexemeAsString lexbuf)) }
  | ['a'-'z''A'-'Z']['a'-'z''A'-'Z''0'-'9']*  { keyword (lexemeAsString lexbuf) }
  | '+'             { PLUS }
  | '-'             { MINUS }
  | '*'             { TIMES }
  | '/'             { DIV }
  | '%'             { MOD }
  | '='             { ASSIGN }
  | "=="            { EQL }
  | '!'             { NOT }
  | eof             { EOF }
  | '('             { LPAR }
  | ')'             { RPAR }
