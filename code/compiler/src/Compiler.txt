
1) Divide 2) specialize 3) unfold

In a Scheme0 program, a program point is the name of the defined function.
During ordinary program execution, control passes from program point to program
point; here by function calls. Values are bound to function parameters.
The bindings are created by function application.

A division is a classication of each function parameter as static or dynamic. During
specialization;
- a static parameter can only be bound to ordinary values, never a residual expression;
- a dynamic parameter may be bound to residual expressions as well as ordinary values.

Congruence: A division is congruent if the value of every static parameter is
determined by the values of other static parameters (and thus ultimately by the
available input).

A specialized program point is a specialized function denition whose name is a
specialized function name. A specialized function name is a pair (f,vs) of an
original function name f and values vs of the static parameters of f. A specialized
Scheme0 program is a collection of such specialized function denitions.

Introducing a specialization point at each dynamic conditional may give
a more compact branching structure in the residual program. How: define a new
function for each dynamic conditional before specialization takes place.
The new function's body will consist of the conditional expression (if e1 e2 e3),
and the conditional expression must be replaced by a call to the new function.

Unfolding: Unfolding replaces a function call (call f ... ej ...) by
a copy of f's body, where every argument expression ej is substituted for the
corresponding formal parameter xj. A trivial basic block corresponds to a function
which does nothing but call another function; calls to such functions can be
eliminated by unfolding. Substituting argument expressions for formal parameters
A strategy for unfolding on the fly must (1) avoid infinite unfolding,
(2) avoid duplication of code and computation, and (3) produce as few residual
calls as possible.

S = all ordinary values
D = all residual expressions and values (dynamic results)
Reduction of the static version (at specialization time) will produce a value,
whereas reduction of the dynamic version will not change its form, only reduce its
subexpressions.

A program division div can be given to the specializer in two ways: separately
as a mapping from function names to variable classications, or integrated into
the subject program as annotation. We require divisions to be congruent.

Specializtion: A Scheme0 function body is specialized by reducing it symbolically,
using the values of static variables.

Bindingtime analysis computes a division: a classication of each function parameter
xij as static (S) or dynamic (D). See buttom of file.
*)

(*
Two-level-syntax / division:
    A static expression e evaluates to some value v
    A dynamic expression evaluates to a residual expression e0.
    The parameter list of a function definition or function application is
        split into two: a list of the static parameters and a list of the dynamic
        parameters.
    Constants are always static, so it is not necessary to annotate them.
    A new construct (lift e) marks a static expression e that occurs in a
        dynamic context. During partial evaluation, a static expression e evaluates
        to some value v, but if it is in a dynamic context, it should really result
        in a residual expression. This is achieved by turning v into the constant
        expression (quote v). The lift mark tells the specializer to do this
NOTE TO SÃ˜REN: For a two-level Scheme0 program to be well-formed, every application
    of a function f must agree with the denition of f, in particular as concerns the
    number of static and dynamic parameters. This requirement corresponds to the
    congruence requirement for monovariant divisions.

Dynamic or static:
    Calls: Note that with a monovariant division div it may well happen that an
        argument expression ej is static according to the binding-time analysis, yet
        it is in the dynamic argument list because the jth parameter of f is dynamic
        according to the division div.
    Conditionals and prims are static or dynamic, depending on the binding times
        of their arguments.
    A conditional is static if e1 is static, and dynamic if e1 is dynamic.
    A prim is static if all ej are static, and dynamic if some ej is dynamic.

Reducing:
    Constants: A number or a constant is static and reduces to a value.
    Variables: A variable yj reduces to the value or expression vj found in vv.
    Conditionals:
        The condition e1 of a static ifs must be static and
            reduce to a value. Depending on this value the entire ifs reduces
            to the reduction of its then or else branch.
        A dynamic ifd reduces to an if expression.
    Prim:
        An application of a static base function ops reduces to the result of
            applying op to the values of its (necessarily static) argument expressions.
        An application of a dynamic base function opd reduces to a base function
            application whose arguments are the reduced argument expressions
    Functions:
        A static function call (calls) is reduced by reducing the called
            function's body, in an environment which binds the function's
            parameters to the reduced argument expressions. This amounts
            to unfolding the call. The result is either a value, if the body
            reduces to a value, or a residual expression.
        A dynamic function call (calld) reduces to a call (call (f . vs) ...)
            of a new specialized function (f . vs). The arguments of the residual
            call are the reduced dynamic argument expressions, and vs is the
            list of values of the static argument expressions.




(*
Binding-time analysis by abstract interpretation:
Binding-time analysis of a Scheme0 subject program computes a division: a classi-
cation of each function parameter xij as static (S) or dynamic (D).

A parameter may be classied as static (S) only if it cannot be bound to a residual
expression. Consequently it is always safe to classify a parameter dynamic: D is a
safe approximation of S. We want to find the least dynamic classification.

Assume a program, and a binding-time classication T1 for the
program's input parameters (that is, the parameters of its first function f1).
A division div maps a function name f to a binding-time environment T = (t1; ...; ta)
which maps a variable xj to its binding time tj {S,D}. In the analysis we need to
find the best (least dynamic) common description of two or more elements...
We define the binding-time analysis as functions Be and Bv:
Be takes an expression e and a BTEnv, and outputs the BindingTimeValue of e {S,D}
    The binding time of a constant c is always static (S).
    The binding time of variable xj is determined by the binding-time environment.
        A dynamic variable y will typically be mapped to itself: the expression y.
    The result of a conditional (if e1 e2 e3) is static if all subexpressions are
        static, otherwise dynamic (recall that least upper bound D union S is D.
        Note that the result is dynamic if the condition is dynamic, even if
        both branches are static.
    Function application and prims are similar to conditional.
Bv takes an expression e, BTEnv T and a name g of a function, and for all calls to
    g in e it checks what the least upper bound of the argument bindings are. Based
    on this it returns the least upper bound BTEnv of the argument binding times.
    Constants does not call g, so the BTEnv is the same
    Variables also
    Conditionals contain the calls contained in e1, e2 and e3. So call Bv on each
        and union these three (least upper bound).
    Prim contains those calls to g which are in the subexpressions. So as with
        conditionals, produce Bv(e)Tg for each expression, and return the union.
    Function calls (f e1 ... ej) might call g in the subexpressions e1..ej.
        Call Bv(e)Tg on each e1..ej. Let t = the union of these, so t is a BTEnv
        If f != g then return t
        If f = g, then the call itself is to g, and we must use Be to find the
        binding times {S,D} of the arguments expressions e1..ej, and take the union
        with t. So return t union (Be(e1), Be(e2) ... Be(ej)).
Be and Bv expresses the congruence rule: if there is some call of function g where
    the j'th argument expression is dynamic, then the j'th parameter of g must be
    described as dynamic. The BTEnv is at least as dynamic as the binding times of
    all argument patterns of function g in e.
*)





// type FunctionName = string

// type BindingTimeVal =
//     | Dynamic of Expr
//     | Static of Value

// type BindingTimeEnv = List<(string * BindingTimeVal)>

// type Dvision = Map<FunctionName, BindingTimeEnv>

// let isStatic e =
//     match e with
//     | Static _ -> true
//     | _ -> false

// let Be (e:Expr) (btenv: List<(string*BindingTimeVal)>) : BindingTimeVal =
//     match e with
//     | Constant c -> Static(c)
//     | Variable y -> match tryLookup y btenv with
//                     | None -> Dynamic(Variable y)
//                     | Some(ds) -> ds
//     | If(cond, thenExpr, elseExpr) ->
//         let l = [Be cond btenv; Be thenExpr btenv; Be elseExpr btenv]
//         if List.exists (isDynamic) l then Dynamic(e) else Static(e)
