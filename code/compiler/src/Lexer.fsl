{
module Lexer

open FSharp.Text.Lexing
open Parser;
open System.Text;;

let lexemeAsString lexbuf =
  LexBuffer<char>.LexemeString lexbuf

(* Start of outermost comment currently being scanned *)
let commentStart = ref Position.Empty;
let commentDepth = ref 0;  (* Current comment nesting *)

let keyword s =
    match s with
    | "else"    -> ELSE
    | "false"   -> CONSTBOOL false
    | "if"      -> IF
    | "then"    -> THEN
    | "elseif"  -> ELSEIF
    | "true"    -> CONSTBOOL true
    | "func"    -> FUNCTION
    | "end"     -> END
    | "Integer" -> INT
    | "Float"   -> FLOAT
    | "Boolean" -> BOOLEAN
    | "Char"    -> CHAR
    | "String"  -> STRING
    | "type"    -> TYPE
    | "match"   -> MATCH
    | "with"    -> WITH
    | _         -> NAME s
}

(*
  string literal not working yet
  rethink the regex
*)
rule Token = parse
  | [' ' '\r' '\t']+ { Token lexbuf }
  | ['\n' '\012']    { lexbuf.EndPos <- lexbuf.EndPos.NextLine; Token lexbuf }
  | '+'              { PLUS }
  | '-'              { MINUS }
  | '*'              { TIMES }
  | '/'              { DIV }
  | '%'              { MOD }
  | '='              { ASSIGN }
  | "=="             { EQL }
  | "!="             { NOTEQL }
  | '>'              { GT }
  | '<'              { LT }
  | ">="             { GE }
  | "<="             { LE }
  | '!'              { NOT }
  | '('              { LPAR }
  | ')'              { RPAR }
  | '['              { LSQUARE }
  | ']'              { RSQUARE }
  | eof              { EOF }
  | ','              { COMMA }
  | '|'              { PIPE }
  | ';'              { SEMICOLON }
  | "<-"             { LARROW }
  | "->"             { RARROW }
  | '_'              { USCORE }
  | "(*"            { commentStart := lexbuf.StartPos;
                    commentDepth := 1;
                    SkipComment lexbuf; Token lexbuf }

and SkipComment = parse
    "*)"            { commentDepth := !commentDepth - 1;
                      if !commentDepth = 0 then ()
                      else SkipComment lexbuf
                    }
   | "(*"           { commentDepth := !commentDepth + 1;
                      SkipComment lexbuf }
   | eof            { failwith "Lexer error: unterminated comment" }
   | _              { SkipComment lexbuf }
