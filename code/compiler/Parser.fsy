%{
  open AbstractSyntax;
%}

// Tokens:
%token <int> CONSTINT
%token <bool> CONSTBOOL
%token <string> NAME
%token PLUS MINUS TIMES DIV MOD
%token ASSIGN
%token EOF

// Not implemented:
%token IF ELSEIF ELSE EQL NOT
%token LPAR RPAR COMMA PIPE
%token NEWLINE FUNCTION END
%token INT FLOAT BOOLEAN STRING CHAR

%left ELSE              /* lowest precedence  */
%left PLUS MINUS
%left TIMES DIV MOD

%nonassoc NOT           /* highest precedence  */

%start Main
%type <AbstractSyntax.expr> Main Program Value Expr Type ADTConstructorParameter ADTSimpleConstructor ADTCompoundConstructor ADTContructor ADT Assignment Statement SimpleStatement CompoundStatement FuncBody FuncDef
%%

Main:
    Program EOF { $1 }
;

Program:
    Expr { $1 }
  | Assignment { $1 }
  | FuncDef { $1 }
  | ADT { $1 }

Value:
    CONSTINT { ConstantInteger $1 }
  | CONSTBOOL { ConstantBoolean $1 }
  | NAME { Variable $1 }
  | LPAR Value COMMA Value RPAR { Tuple($2, $4) }

Expr:
    Value { $1 }
  | Expr PLUS Expr { Prim("+", $1, $3)  }
  | Expr MINUS Expr { Prim("-", $1, $3)  }
  | Expr TIMES Expr { Prim("*", $1, $3)  }
  | Expr DIV Expr { Prim("/", $1, $3)  }
  | Expr MOD Expr { Prim("%", $1, $3)  }

// ====== ADT grammar rules: =======
Type:
    INT { $1 }
  | FLOAT { $1 }
  | BOOLEAN { $1 }
  | STRING { $1 }
  | CHAR { $1 }

ADTConstructorParameter:
    Type { $1 }
  | Type ADTConstructorParameter { $1, $2 }

ADTSimpleConstructor:
    NAME ADTConstructorParameter { $1, $2 }
  | NAME ADTConstructorParameter PIPE ADTContructor { $1, $2, $4 }

ADTCompoundConstructor:
    NEWLINE NAME ADTConstructorParameter { $2, $3 }
  | NEWLINE NAME ADTConstructorParameter PIPE ADTContructor { $2, $3, $5 }

ADTContructor:
    ADTSimpleConstructor { $1 }
  | ADTCompoundConstructor { $1 }

ADT:
  Type NAME ASSIGN ADTContructor { ADT($2, $4) }
// =================================

Assignment:
    NAME ASSIGN Expr NEWLINE { Let($1, $3) }
  | ADT NEWLINE { $1 }

// ==== Function grammar rules: ====
Statement:
    Expr { $1 }
  | Assignment { $1 }

SimpleStatement: Expr { $1 }

CompoundStatement: NEWLINE Statement NEWLINE END { $2 }

FuncBody:
    SimpleStatement NEWLINE { $1 }
  | CompoundStatement { $1 }

FuncDef:
  FUNCTION NAME NAME ASSIGN FuncBody { Function($2, $3, $5) }
// =================================
