%{
  open AbstractSyntax;
%}

// Tokens:
%token <int> CONSTINT
%token <bool> CONSTBOOL
%token <string> NAME
%token PLUS MINUS TIMES DIV MOD
%token LET
%token EQ
%token EOF

%start Main
%type <AbstractSyntax.expr> Main

%%

Main:
  Expr EOF { $1 }
;

Expr:
    CONSTINT        { ConstantInteger $1 }
  | Expr PLUS Expr  { Prim("+", $1, $3)  }
  | Expr MINUS Expr { Prim("-", $1, $3)  }
  | Expr TIMES Expr { Prim("*", $1, $3)  }
  | Expr DIV   Expr { Prim("/", $1, $3)  }
  | Expr MOD   Expr { Prim("%", $1, $3)  }
;

AtExpr:
  LET NAME EQ Expr { Let($2, $4) }
