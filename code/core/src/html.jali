type Attribute = Att Tuple;
type Node = Text String | Tag String [Attribute] [Node];
type Message = Increment | Decrement;
type Action = Click;

init = 0;

func update msg model =
  match msg with
  | Increment -> model + (1)
  | Decrement -> model + (-1)
end

func onClick msg =
  update (msg) (init)
end

func view model =
  Tag ('div') ([('class', 'div'), ('id', 'myId')]) ([
    Tag ('p') ([]) ([
      Text ('Hello World')
    ]),
    Tag ('div') ([('class', 'div-inner')]) ([
      Tag ('button') ([('class', 'increment'), (Click, (onClick (Increment)))]) ([Text ('Increment')]),
      Tag ('p') ([('id', 'model')]) ([Text (model)]),
      Tag ('button') ([('class', 'decrement'), (Click, (onClick (Decrement)))]) ([Text ('Decrement')]),
    ])
  ])
end

func patchtojs view changes =

end

(*
'  const el = document.querySelector(&quot;#model&quot;);' +
'  let result = parseInt(el.innerHTML) +' + v + ';'+
'  el.innerHTML = result;' +
*)

func attributesToString attributes =
  match attributes with
  | [] -> ''
  | x::xs ->
    match x with
    | (k, v) ->
      match k with
      | Click ->
        'onclick="(() => { ' +
        patchtojs +
        '})()"'
      | _ -> ' ' + k + '=' + v + ' ' + (attributesToString xs)
end

func setIdentifier index depth =
  ' data-identifier="' + index + '-child--' + depth + '-depth"'
end

func tagToString t index depth =
  match t with
  | [] -> ''
  | x::xs ->
    match x with
    | Text (text) -> text + (tagToString (xs) (0) (depth))
    | Tag (elementName) (attributes) (children) ->
      '<' + elementName + (attributesToString (attributes)) + (setIdentifier (index) (depth)) + '>' +
          (tagToString (children) (0) (depth + 1)) +
      '</' + elementName + '>' +
      (tagToString (xs) (index + 1) (depth))
    | _ -> ''
  | _ -> ''
end

func html tags =
  '<!DOCTYPE html>' +
  '<html lang="en">' +
  '<head>' +
  '    <meta charset="UTF-8">' +
  '    <meta name="viewport" content="width=device-width, initial-scale=1.0">' +
  '    <title>Hello World</title>' +
  '  </head>' +
  '<body>' +
     tags +
  '</body>' +
  '</html>'
end

html (tagToString ([view (init)]) (0) (0))

(*
func main init view update =

end

main (0) (view) (update)
*)
