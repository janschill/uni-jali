type Attribute = Att Tuple;
type Node = Text String | Tag String [Attribute] [Node];
type Message = Increment | Decrement;
type Differ =
    Null
  | Change Node
  | Path Integer Differ;
type Option = None

func diff view1 view2 =
  func fold nodes1 nodes2 index =
    match (nodes1, nodes2) with
    | (n1::r1, n2::r2) ->
        (x =
          match (n1, n2) with
          | (Tag (t1) (atts1) (children1), Tag (t2) (atts2) (children2)) ->
              if t1 == t2 then
                f = (fold (children1) (children2) (0));
                match f with
                | Null -> Null
                | change -> change
              else
                Change (Tag (t2) (atts2) (ns2))
          | (Text (s1), Text (s2)) ->
              if (s1 == s2) then Null else Change(Text(s2))
          ;
        match x with
        | Null -> fold (r1) (r2) (index + 1)
        | change -> Path (index) (change))
    | _ -> Null
  end
  fold ([view1]) ([view2]) (0)
end

func head list =
  match list with
  | x::xs -> x
  | [] -> None
end

func tail list =
  match list with
  | x::xs -> xs
  | [] -> None
end

func append list1 list2 =
  match (list1, list2) with
  | ([], list2) -> list2
  | (x::[xs], list2) -> x::append (xs) (list2)
end
append ([1,2]) ([3,4])

func flatten list =
  match list with
  | [] -> []
  | []::vs -> flatten vs
  | (x::xs)::vs -> x::flatten (xs::vs)
end

func f x =
  x
end

func map f list =
  match list with
  | [] -> []
  | x::xs -> f (x)::map (f) (xs)
end

l = flatten ([1, [2, 3]]);
l

func f i item =
  if i == 0
  then item + 1
  else item
end

func mapi f list =
  func loop index ls =
    match list with
    | [] -> []
    | x::xs -> (f (index) (x)) :: (loop (index + 1) (xs))
  end
  loop 0 list
end

mapi (f) ([1,2,3])


func patch view changes =
  match changes with
  | Null -> view
  | Change (n) -> n
  | Path (index) (d) ->
    match view with
    | Tag (name) (atts) (nodes) ->
      func f i item =
        if i == index
        then patch (item) (d)
        else item
      end
      items = mapi (f) (nodes)
      Tag (name) (atts) (items)
end

(*
Diff (view model1) (view model2)
Maximal change: static_change = reduce (diff (view model1) (view model2))
static_view = patch static_change (view model0)

Diff (view (model0)) ((view current_model))
Differ2js (diff)  = “…”
Differ2js (diff (model0) (current_model))
Reduce (Differ2js (diff (model0) (current_model)))

make reduce work
generate HTML from view
diff generate javascript
diff against model0
*)

func view model =
  Tag ('div') ([]) ([
    Text ('12313'),
    Tag ('div') ([]) ([
      Text (model),
      Text ('Hello World')
    ])
  ])
end

view1 = view (1);
view2 = view (2);

changes = diff (view1) (view2);
changes
