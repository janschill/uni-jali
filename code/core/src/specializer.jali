type Attribute = Att Tuple;
type Node = Text String | Tag String [Attribute] [Node];
type Message = Increment | Decrement;
type Differ =
    Null
  | Change Node
  | Path Integer Differ;

func diff view1 view2 =
  func fold nodes1 nodes2 index =

    func compare n1 n2 =
      match (n1, n2) with
      | (Tag (t1) (atts1) (children1), Tag (t2) (atts2) (children2)) ->
          if t1 == t2 then
            f = (fold (children1) (children2) (0));
            match f with
            | Null -> Null
            | change -> change
          else
            Change (Tag (t2) (atts2) (ns2))
      | (Text (s1), Text (s2)) ->
          if (s1 == s2) then Null else Change(Text(s2))
    end

    match (nodes1, nodes2) with
    | (n1::r1, n2::r2) ->
        x = compare n1 n2;
        match x with
        | Null -> fold (r1) (r2) (index + 1)
        | change -> Path (index) (change)
    | _ -> Null
  end
  fold ([view1]) ([view2]) (0)
end

(*
Diff (view model1) (view model2)
Maximal change: static_change = reduce (diff (view model1) (view model2))
static_view = patch static_change (view model0)

Diff (view (model0)) ((view current_model))
Differ2js (diff)  = “…”
Differ2js (diff (model0) (current_model))
Reduce (Differ2js (diff (model0) (current_model)))

make reduce work
generate HTML from view
diff generate javascript
diff against model0
*)

func view model =
  Tag ('div') ([]) ([
    Text ('12313'),
    Tag ('div') ([]) ([
      Text (model),
      Text ('Hello World')
    ])
  ])
end


(*  THE FOLLOWING IS THE ELM-LIKE WEB APPLICATION IN JALI *)
init = 0;

type Message = Increment | Decrement;

func update msg m = (* return a view *)
  match msg with
  | Increment -> m+1
  | Decrement -> m+(-1)
end

func view model =
  Tag ('div') ([]) ([
    Tag ('button') ([('onClick', update (Decrement) (model))]) ([
      Text ('Decrement')
    ]),
    Text (model)
  ])
end


(*  NOW REDUCING WITH A DYNAMIC MODEL!
  diff (view) (view (update increment dynamic))
  patch (diff (view) (view (update increment dynamic)))
*)

view0 = view (init);

func dynamicDiff model =
  diff (view0) (view (update Increment model))
end

dynamicDiff
