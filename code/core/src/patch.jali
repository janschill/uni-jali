type Node = Text String | Tag String [(String, String)] [Node];
type Message = Increment | Decrement;
type Action = Click;
type Differ =
    Null
  | Change Node
  | Path Integer Differ;

func update msg m =
  match msg with
  | #Increment -> m + 1
  | #Decrement -> m - 1
end

func view model =

    Tag ('p') ([]) ([
      Text (model)
    ])

end


(* model-view-update-cycle *)
func diff view1 view2 =
  func fold nodes1 nodes2 index =
    match (nodes1, nodes2) with
    | (n1::r1, n2::r2) ->
      (match diff (n1) (n2) with
      | #Null -> fold (r1) (r2) (index + 1)
      | change -> Path (index) (change))
    | _ -> Null
  end

  match (view1, view2) with
  | (Tag (t1) (atts1) (children1), Tag (t2) (atts2) (children2)) ->
      if t1 == t2
      then fold (children1) (children2) (0)
      else Change (Tag (t2) (atts2) (children2))
  | (Text (s1), Text (s2)) ->
      if (s1 == s2) then Null else Change(Text s2)
end

(* List helper functions *)
func head ls =
  match ls with
  | [] -> 'Head exception'
  | x::xs -> x
end

func append ls1 ls2 =
  match (ls1, ls2) with
  | ([], ls2) -> ls2
  | (l::ls, ls2) -> l::(append (ls) (ls2))
end

(* JaLi to HTML *)
func attributesToHTML attributes =
  match attributes with
  | [] -> ''
  | x::xs ->
    match x with
    | (k, v) ->
      match k with
      | Click ->
        ' onclick="(() => { ' +
        '   eval(' + v + ')' +
        '})()"'
      | _ -> ' ' + k + '=' + v + ' ' + (attributesToHTML xs)
end

(* Script tags do not have children *)
func scriptTagToHTML children =
  match (head children) with
  | Text (t) -> '<script>' + t + '</script>'
  | _ -> ''
end

(*
  We are currently wrapping every text node in a <span>.
  This is because our diff function does not distinguish
  between Tag or Text creating a Path deeper, telling us
  to change the Text, where we really need to change the
  parent node of the Text node.
  Tag ('div') ([]) ([
    Text "Hello World"
  ])
  Path 0 (Change (Text "Hello World"))
  Meaning the first element within the <div>.
  But because the correct HTML would be: <div>Hello World</div>
  and we cannot grab just the text, we need to grab the parent.
*)
func viewToHTML tags =
  match tags with
  | [] -> ''
  | x::xs ->
    (match x with
    | Text (text) ->
      '<span>' + text +  '</span>' + (viewToHTML (xs))
    | Tag (elementName) (attributes) (children) ->
      if elementName == 'script'
      then scriptTagToHTML (children)
      else
        '<' + elementName + (attributesToHTML (attributes)) + '>' +
            (viewToHTML (children)) +
        '</' + elementName + '>' +
        (viewToHTML (xs))
    | _ -> '')
  | _ -> ''
end

(* model-view-update-cycle *)
func diff view1 view2 =
  func fold nodes1 nodes2 index =
    match (nodes1, nodes2) with
    | (n1::r1, n2::r2) ->
      (match diff (n1) (n2) with
      | #Null -> fold (r1) (r2) (index + 1)
      | change -> Path (index) (change))
    | _ -> Null
  end

  match (view1, view2) with
  | (Tag (t1) (atts1) (children1), Tag (t2) (atts2) (children2)) ->
      if t1 == t2
      then fold (children1) (children2) (0)
      else Change (Tag (t2) (atts2) (children2))
  | (Text (s1), Text (s2)) ->
      if (s1 == s2) then Null else Change(Text s2)
end

(*
  Looping through the sequence of elements:
  [0,1,0] means:
    - get children of first element
    - get children of second element
    - select first element
  `document.body.children[0].children[1].children[0]`
*)
func documentChildrenLoop str list =
  (match list with
  | [] -> str
  | x::xs ->
    s = str + '.children[' + x + ']';
    documentChildrenLoop (s) (xs))
end

func documentChildren seq =
  documentChildrenLoop ('document.body') (seq)
end

func changeInnerHTMLToString seq value =
  element = documentChildren (seq);
  element + '.innerHTML = ' + value + ';'
end

createElementFromString =
  'function createElementFromString(htmlString) {' +
  '  const tempEl = document.createElement("div");' +
  '  tempEl.innerHTML = htmlString.trim();' +
  '  return tempEl.firstChild;' +
  '}';

func changeElementToString tag seq =
  el = documentChildren (seq);
  newEl = 'newEl';

  createElementFromString +
  'const ' + newEl + ' = createElementFromString("' + (viewToHTML ([tag])) + '");' +
  el + '.parentNode.replaceChild(' + newEl + ', '+ el + ');'
end

func patchToJs changes =
  func loop seq chs =
    (match chs with
    | Path (idx) (d) ->
      loop (append (seq) ([idx])) (d)
    | #Null -> 'patchToJs -> Null'
    | Change (n) ->
      (match n with
      | Text (t) ->
        (changeInnerHTMLToString (seq) (t))
      | tag -> changeElementToString (tag) (seq)
      | _ -> 'error'))
  end
  loop ([0]) (changes)
end

func html tags =
  '<!DOCTYPE html>' +
  '<html lang="en">' +
  '<head>' +
  '    <meta charset="UTF-8">' +
  '    <meta name="viewport" content="width=device-width, initial-scale=1.0">' +
  '    <title>Hello World</title>' +
  '  </head>' +
  '<body>' +
     tags +
  '</body>' +
  '</html>'
end

(*
func view model =
  Tag ('div') ([]) ([
    Tag ('button') ([]) ([Text ('Increment')]),
    Tag ('p') ([]) ([
      Text (model)
    ]),
    Tag ('button') ([]) ([Text ('Decrement')])
  ])
end

view1 = view (1) ('p');
view2 = view (2) ('span');
view1 = view (1);
view2 = view (2);
html (viewToHTML ([view1]))
changes = diff (view1) (view2);
html (viewToHTML ([view1]))
changes = diff (view1) (view2);
patchToJs changes
changes = diff (view (init)) (view (update (Increment) (init)));
changes
*)

func dynamicDiff model =
   patchToJs (diff (view model) (view (update Decrement model)))
end

dynamicDiff
