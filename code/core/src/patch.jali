type Attribute = Att Tuple;
type Node = Text String | Tag String [Attribute] [Node];
type Message = Increment | Decrement;
type Action = Click;
type Differ =
    Null
  | Change Node
  | Path Integer Differ;

func attributesToString attributes =
  match attributes with
  | [] -> ''
  | x::xs ->
    match x with
    | (k, v) ->
      match k with
      | Click ->
        ' onclick="(() => { ' +
        'TODO: (patchToJs () ())' +
        '})()"'
      | _ -> ' ' + k + '=' + v + ' ' + (attributesToString xs)
end

func setIdentifier index depth =
  ' id=' + index + '-child.' + depth + '-depth'
end

func tagToString t index depth =
  match t with
  | [] -> ''
  | x::xs ->
    (match x with
    | Text (text) -> text + (tagToString (xs) (0) (depth + 1))
    | Tag (elementName) (attributes) (children) ->
      '<' + elementName + (attributesToString (attributes)) + (setIdentifier (index) (depth)) + '>' +
          (tagToString (children) (0) (depth + 1)) +
      '</' + elementName + '>' +
      (tagToString (xs) (index + 1) (depth))
    | _ -> '')
  | _ -> ''
end

(* DIFF *)
func diff view1 view2 =
  func fold nodes1 nodes2 index =
    match (nodes1, nodes2) with
    | (n1::r1, n2::r2) ->
      (match diff (n1) (n2) with
      | Null -> fold (r1) (r2) (index + 1)
      | change -> Path (index) (change))
    | _ -> Null
  end

  match (view1, view2) with
  | (Tag (t1) (atts1) (children1), Tag (t2) (atts2) (children2)) ->
      if t1 == t2
      then fold (children1) (children2) (0)
      else Change (Tag (t2) (atts2) (children2))
  | (Text (s1), Text (s2)) ->
      if (s1 == s2) then Null else Change(Text s2)
end

(* PATCH *)
func mapi f list =
  func loop index ls =
    match ls with
    | x::xs ->
      head = f (index) (x);
      tail = loop (index + 1) (xs);
      head::tail
    | [] -> []
  end
  loop 0 list
end

func patch view changes =
  match changes with
  | Null -> view
  | Change (n) -> n
  | Path (index) (d) ->
    match view with
    | Tag (name) (atts) (nodes) ->
      func f i item =
        if i == index
        then patch (item) (d)
        else item
      end
      items = mapi (f) (nodes);
      Tag (name) (atts) (items)
    | _ -> 'Patch exception'
end

func update msg model =
  match msg with
  | Increment -> model + (1)
  | Decrement -> model + (-1)
end

func selectElementToString index depth =
  'const el' + index + depth + ' = document.getElementById("' +
    index + '-child.' +
    depth + '-depth");'
end

func changeInnerHTMLToString value index depth =
  'el' + index + depth + '.innerHTML = ' + value + ';'
end

func setAttributesToString element attributes =
  match attributes with
  | [] -> ''
  | x::xs ->
    (match x with
    | (k, v) ->
      element + '.setAttribute("' + k + '", "' + v + '");' +
      (setAttributesToString (element) (xs))
    | _ -> 'setAttribute wildcard')
  | _ -> 'attributes wildcard'
end

// Creates a DOM node from an HTML string
func createElementFromString =
  'function createElementFromString(htmlString) {' +
  '  const tempEl = document.createElement("div");' +
  '  tempEl.innerHTML = htmlString.trim();' +
  '  return tempEl.firstChild;' +
  '}'
end

func changeElementToString tag index depth =
  el = 'el' + index + depth;
  newEl = 'newEl';

  (selectElementToString (index) (depth)) +
  (createElementFromString ()) +
  'const ' + newEl + ' = createElementFromString("' + (tagToString ([tag]) (index) (depth)) + '");' +
  el + '.parentNode.replaceChild(' + newEl + ', '+ el + ');'
end

func patchToJs changes =
  func loop index depth chs =
    match chs with
    | Null -> 'patchToJs -> Null'
    | Path (idx) (d) ->
      loop (idx) (depth + 1) (d)
    | Change (n) ->
      match n with
      | Text (t) ->
        (selectElementToString (index) (depth + (-1))) +
        (changeInnerHTMLToString (t) (index) (depth + (-1)))
      | tag -> changeElementToString (tag) (index) (depth)
      | _ -> 'error'
  end
  loop (0) (0) (changes)
end

func html tags =
  '<!DOCTYPE html>' +
  '<html lang="en">' +
  '<head>' +
  '    <meta charset="UTF-8">' +
  '    <meta name="viewport" content="width=device-width, initial-scale=1.0">' +
  '    <title>Hello World</title>' +
  '  </head>' +
  '<body>' +
     tags +
  '</body>' +
  '</html>'
end

init = 0;

func onClick msg =
  update (msg) (init)
end

func renderStateAsJs model =
  'let model = ' + model + ';'
end

func view model =
  Tag ('div') ([]) ([
    Tag ('button') ([(Click, (onClick (Increment)))]) ([Text ('Increment')]),
    Tag ('p') ([]) ([
      Text (model)
    ]),
    Tag ('button') ([(Click, (onClick (Decrement)))]) ([Text ('Decrement')]),
    Tag ('script') ([]) ([
      Text (renderStateAsJs model)
    ])
  ])
end

view1 = view (1);
view2 = view (2);

(*
patchToJs changes
changes = diff (view1) (view2);
html (tagToString ([view1]) (0) (0))
*)
changes = diff (view1) (view (update (Increment) (init)));
changes


(*

func view model tagname =
  Tag ('div') ([]) ([
    Tag (tagname) ([]) ([
      Text (model)
    ])
  ])
end

view1 = view (1) ('p');
view2 = view (2) ('span');

*)
