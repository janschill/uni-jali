
type Bindings = list<string * Expr>

type ReducedMatch =
    | NoMatch
    | DynamicMatch of Bindings
    | StaticMatch of Bindings

(* If actual is dynamic, this traverses the pattern 
    and collects all variables as bindings *)
let rec collect = 
    function
    | Variable x -> [ (x, Variable x) ]
    | Tuple (e1, e2) -> collect e1 @ collect e2
    | List exprs -> exprs |> List.collect collect
    | ConcatC (h, t) -> collect h @ collect t
    | Apply (name, values) -> values |> List.collect collect
    | _ -> []

(* match1 returns
        None            if there can never be a match
        Some bindings   *)
let rec match1 (actual: Expr, case: Expr) =
    match (actual, case) with
    | Constant v1, Constant v2 when v1 = v2 -> StaticMatch []
    | _, Constant (CharValue '_') -> StaticMatch []
    | _, Variable x -> StaticMatch [ (x, actual) ] 
    | Variable a, _ -> DynamicMatch <| collect case
    | Tuple (e1, e2), Tuple (p1, p2) -> 
        matchMany [ e1; e2 ] [ p1; p2 ]
    | List es, List pats when es.Length = pats.Length -> matchMany es pats
    | List (h :: t), ConcatC (h', t') -> 
        matchMany [ h; (List t) ] [ h'; t' ]
    | Apply (name, exprs), Apply (pname, pats) 
        when List.length exprs = List.length pats ->
        matchMany (name :: exprs) (pname :: pats)
    | Apply (name, exprs), Constant (ADTValue (x, _, vals)) when List.length exprs = List.length vals ->
        matchMany 
            (name :: exprs) 
            (Variable x :: List.map Constant vals)
    | Constant (ADTValue (name, _, [])), Constant (ADTValue (x, _, [])) when x = name -> StaticMatch []
    | Constant (ADTValue (name, _, values)), Apply (Variable name1, exprs) ->
        if name = name1
        then matchMany (List.map Constant values) exprs
        else NoMatch
    | _, _ ->
        NoMatch

and matchMany exprs pats =
    let matches = List.map match1 <| List.zip exprs pats
    if List.exists ((=) NoMatch) matches then
        NoMatch
    else
        let bindings =
            matches
            |> List.collect (function
                | DynamicMatch bindings -> bindings
                | StaticMatch bindings -> bindings
                | NoMatch -> failwithf "Impossible: NoMatch")

        if List.exists (function
            | DynamicMatch _ -> true
            | _ -> false) matches then
            DynamicMatch bindings
        else
            StaticMatch bindings